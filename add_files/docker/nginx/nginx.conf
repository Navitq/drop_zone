# Ограничение запросов (опционально)
# limit_req_zone $binary_remote_addr zone=req_limit_per_ip:10m rate=150r/s;

# Перенаправление HTTP → HTTPS
server {
    listen 80;
    listen [::]:80;
    server_name warhammer40000.ru www.warhammer40000.ru;
    return 301 https://$host$request_uri;
}


server {
    listen 443 ssl http2;
    listen [::]:443 ssl;
    server_name warhammer40000.ru www.warhammer40000.ru;
    # root /app/build;
    # index index.html index.htm;
    charset UTF-8;

    ssl_certificate      /app/fullchain.pem;
    ssl_certificate_key  /app/privkey.pem;


    ssl_protocols TLSv1.2 TLSv1.3;

    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_stapling_verify on;
    ssl_prefer_server_ciphers on;
    resolver 1.1.1.1 8.8.8.8 valid=300s;
    resolver_timeout 5s;

    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    server_tokens off;

    error_log /var/log/nginx/error.log info;
    access_log /var/log/nginx/host.access.log main;

    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    client_max_body_size 10M;
    client_body_buffer_size 16k;

    gzip on;
    gzip_comp_level 6;
    gzip_types text/plain text/css application/javascript application/json application/xml application/xml+rss text/javascript;

    # limit_req zone=req_limit_per_ip burst=150 nodelay;
    add_header Access-Control-Allow-Origin "*";

    # Указываем пути к SSL-сертификатам
    # include /etc/letsencrypt/options-ssl-nginx.conf;
    # ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
    # Улучшенные SSL настройки
    # add_header Content-Security-Policy "default-src 'self'; script-src 'self' https://apis.google.com; connect-src 'self' http://89.104.68.117:9000 http://89.104.68.117:80; font-src 'self' data:;" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    # Защита от XSS атак

    location /api/ {
        # limit_except GET POST {
        #     deny all;
        # }
        proxy_pass http://backend:8000/api/;
        proxy_redirect off;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization" always;

        if ($request_method = OPTIONS) {
            return 204;
        }
    }

    location /static_backend/ {
        limit_except GET {
            deny all;
        }
        alias /app/staticfiles/;   # Путь, где будут собраны статические файлы Django
        access_log off;
        expires 30d;  # Для кэширования статики на фронтенде
        add_header Cache-Control "public, max-age=2592000, immutable";

    }

    location / {
        add_header Cache-Control "public, max-age=7200, must-revalidate";
        # add_header Pragma "no-cache";
        # add_header Expires "0";
        limit_except GET POST {
            deny all;
        }
        root /app/build;
        index index.html index.htm;
        try_files $uri $uri/ /index.html =404; # [1] Добавлено =404 для правильной отдачи 404 статуса если файл не найден
    }

    location ~* \.(php|cgi|pl|sh)$ {
        deny all;
    }

    location ~ \.\./ {
        deny all;
    }


    # SSL настройки (если используются HTTPS)
    # ssl_protocols TLSv1.2 TLSv1.3;
    # ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256';
    # ssl_prefer_server_ciphers on;
}
