# Generated by Django 5.2.5 on 2025-10-26 06:01

import django.db.models.deletion
import django.utils.timezone
import multiselectfield.db.fields
import uuid
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Advertisement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title_1', models.JSONField(blank=True, default=dict)),
                ('title_1_ru', models.CharField(max_length=255)),
                ('title_1_en', models.CharField(max_length=255)),
                ('subTitle_1', models.JSONField(blank=True, default=dict)),
                ('subTitle_1_ru', models.CharField(max_length=255)),
                ('subTitle_1_en', models.CharField(max_length=255)),
                ('imgUrl_1', models.URLField(max_length=255)),
                ('data_and_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('title_2', models.JSONField(blank=True, default=dict)),
                ('title_2_ru', models.CharField(max_length=255)),
                ('title_2_en', models.CharField(max_length=255)),
                ('subTitle_2', models.JSONField(blank=True, default=dict)),
                ('subTitle_2_ru', models.CharField(max_length=255)),
                ('subTitle_2_en', models.CharField(max_length=255)),
                ('imgUrl_2', models.URLField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='BackgroundMainPage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pc_background_url', models.URLField()),
                ('mobile_background_url', models.URLField()),
                ('pc_background_grass_url', models.URLField()),
                ('mobile_background_grass_url', models.URLField()),
            ],
        ),
        migrations.CreateModel(
            name='Battle',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('ended_at', models.DateTimeField(blank=True, null=True)),
                ('players_amount', models.PositiveSmallIntegerField(default=2)),
                ('is_active', models.BooleanField(default=True)),
                ('game_state', models.CharField(choices=[('waiting', 'Ожидание'), ('in_process', 'В процессе'), ('canceled', 'Отменен'), ('finished', 'Завершен успешно'), ('failed', 'Не состоялся')], default='waiting', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Case',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name_ru', models.CharField(max_length=70)),
                ('name_en', models.CharField(max_length=70)),
                ('name', models.JSONField(blank=True, default=dict)),
                ('icon_url', models.URLField(blank=True, null=True)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('type', models.CharField(choices=[('standart_case', 'Стандартный кейс'), ('season_case', 'Сезонный кейс'), ('bloger_case', 'Блогерский кейс')], default='standart_case', max_length=20)),
            ],
            options={
                'verbose_name': 'Case',
                'verbose_name_plural': 'Cases',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CrownFilterData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rarity', multiselectfield.db.fields.MultiSelectField(choices=[('usuall', 'Usual'), ('rare', 'Rare'), ('classified', 'Classified'), ('elite', 'Elite'), ('epic', 'Epic')], default=['elite', 'epic'], max_length=100)),
                ('exterior_wear', multiselectfield.db.fields.MultiSelectField(choices=[('factory_new', 'Factory New'), ('minimal_wear', 'Minimal Wear'), ('field_tested', 'Field-Tested'), ('well_worn', 'Well-Worn'), ('battle_scarred', 'Battle-Scarred')], default=['factory_new', 'minimal_wear', 'field_tested', 'well_worn', 'battle_scarred'], max_length=100)),
                ('price', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
            ],
            options={
                'verbose_name': 'Фильтр Crown',
                'verbose_name_plural': 'Фильтр Crown',
            },
        ),
        migrations.CreateModel(
            name='GlobalCoefficient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('raffles_global', models.FloatField(default=1.0, verbose_name='Коэф. розыгрышей')),
                ('cases_global', models.FloatField(default=1.0, verbose_name='Коэф. кейсов')),
                ('upgrades_global', models.FloatField(default=1.0, verbose_name='Коэф. апгрейдов')),
                ('contracts_global', models.FloatField(default=1.0, verbose_name='Коэф. контрактов')),
                ('battles_global', models.FloatField(default=1.0, verbose_name='Коэф. баттлов')),
            ],
            options={
                'verbose_name': 'Глобальные коэффициенты',
                'verbose_name_plural': 'Глобальные коэффициенты',
            },
        ),
        migrations.CreateModel(
            name='GlobalStateCoeff',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('factory_new', models.FloatField(default=0, verbose_name='Factory New')),
                ('minimal_wear', models.FloatField(default=0, verbose_name='Minimal Wear')),
                ('field_tested', models.FloatField(default=0, verbose_name='Field-Tested')),
                ('well_worn', models.FloatField(default=0, verbose_name='Well-Worn')),
                ('battle_scarred', models.FloatField(default=0, verbose_name='Battle-Scarred')),
            ],
            options={
                'verbose_name': 'Глобальные коэффициенты состояния',
                'verbose_name_plural': 'Глобальные коэффициенты состояния',
            },
        ),
        migrations.CreateModel(
            name='InventoryItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('case_id', models.CharField(blank=True, max_length=128, null=True)),
                ('exterior_wear', models.CharField(choices=[('factory_new', 'Factory New'), ('minimal_wear', 'Minimal Wear'), ('field_tested', 'Field-Tested'), ('well_worn', 'Well-Worn'), ('battle_scarred', 'Battle-Scarred')], max_length=20)),
                ('market_hash_name', models.CharField(blank=True, max_length=250, null=True)),
                ('tradable', models.BooleanField(default=True)),
                ('marketable', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Inventory Item',
                'verbose_name_plural': 'Inventory Items',
            },
        ),
        migrations.CreateModel(
            name='TotalActionAmount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_upgrades', models.PositiveIntegerField(default=0, verbose_name='Суммарно апгрейдов')),
                ('total_opened_cases', models.PositiveIntegerField(default=0, verbose_name='Суммарно откртых кейсов')),
                ('total_contracts', models.PositiveIntegerField(default=0, verbose_name='Суммарно контрактов')),
            ],
            options={
                'verbose_name': 'Общее количество действий на сайте',
                'verbose_name_plural': 'Общее количество действий на сайте',
            },
        ),
        migrations.CreateModel(
            name='BattleDrop',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('battle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='drops', to='main_app.battle')),
            ],
        ),
        migrations.CreateModel(
            name='BattleDropItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveSmallIntegerField(default=1)),
                ('round', models.PositiveSmallIntegerField()),
                ('battle_drop', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='main_app.battledrop')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_app.inventoryitem')),
            ],
        ),
        migrations.CreateModel(
            name='ItemsOrders',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('trade_link', models.URLField(blank=True, null=True)),
                ('order_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('completed', models.BooleanField(default=False)),
                ('inventory_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders', to='main_app.inventoryitem')),
            ],
            options={
                'verbose_name': 'Item Order',
                'verbose_name_plural': 'Item Orders',
            },
        ),
        migrations.CreateModel(
            name='SteamItemCs',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('appid', models.PositiveIntegerField(blank=True, default=730, null=True)),
                ('classid', models.CharField(blank=True, max_length=50, null=True)),
                ('instanceid', models.CharField(default='0', max_length=50)),
                ('item_model', models.CharField(blank=True, max_length=50)),
                ('item_style', models.CharField(blank=True, max_length=50)),
                ('name', models.CharField(blank=True, max_length=70)),
                ('chance_factory_new', models.DecimalField(blank=True, decimal_places=10, default=Decimal('0.0100000000'), max_digits=20)),
                ('chance_minimal_wear', models.DecimalField(blank=True, decimal_places=10, default=Decimal('0.9900000000'), max_digits=20)),
                ('chance_field_tested', models.DecimalField(blank=True, decimal_places=10, default=Decimal('0.9000000000'), max_digits=20)),
                ('chance_well_worn', models.DecimalField(blank=True, decimal_places=10, default=Decimal('0.2500000000'), max_digits=20)),
                ('chance_battle_scarred', models.DecimalField(blank=True, decimal_places=10, default=Decimal('0.6500000000'), max_digits=20)),
                ('price_factory_new', models.DecimalField(blank=True, decimal_places=2, default=10, max_digits=14)),
                ('price_minimal_wear', models.DecimalField(blank=True, decimal_places=2, default=10, max_digits=10)),
                ('price_field_tested', models.DecimalField(blank=True, decimal_places=2, default=10, max_digits=10)),
                ('price_well_worn', models.DecimalField(blank=True, decimal_places=2, default=10, max_digits=10)),
                ('price_battle_scarred', models.DecimalField(blank=True, decimal_places=2, default=10, max_digits=10)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('commodity', models.BooleanField(default=False)),
                ('rarity', models.CharField(choices=[('usuall', 'Usual'), ('rare', 'Rare'), ('elite', 'Elite'), ('epic', 'Epic'), ('classified', 'Classified')], default='usuall', max_length=20)),
                ('icon_url', models.URLField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Steam Item CS',
                'verbose_name_plural': 'Steam Items CS',
                'unique_together': {('appid', 'classid', 'instanceid')},
            },
        ),
        migrations.AddField(
            model_name='inventoryitem',
            name='steam_item',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='instances', to='main_app.steamitemcs'),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('username', models.CharField(default='username', max_length=200, unique=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('first_name', models.CharField(blank=True, max_length=30)),
                ('last_name', models.CharField(blank=True, max_length=30)),
                ('avatar_url', models.URLField(blank=True, default='/images/avatar.svg', max_length=500, null=True)),
                ('roulet_chance', models.FloatField(default=1)),
                ('upgrade_chance', models.FloatField(default=1)),
                ('case_chance', models.FloatField(default=1)),
                ('contracts_chance', models.FloatField(default=1)),
                ('battles_chance', models.FloatField(default=1)),
                ('item_state_chance', models.FloatField(default=1)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('trade_link', models.URLField(blank=True, default='', null=True)),
                ('best_case', models.JSONField(blank=True, default=dict)),
                ('best_skin', models.JSONField(blank=True, default=dict)),
                ('blocked_at', models.DateField(blank=True, default=None, null=True)),
                ('blocked_reason', models.TextField(blank=True, default='', null=True)),
                ('total_case_opened', models.PositiveIntegerField(default=0)),
                ('total_upgrades', models.PositiveIntegerField(default=0)),
                ('total_raffles', models.PositiveIntegerField(default=0)),
                ('total_battles', models.PositiveIntegerField(default=0)),
                ('total_contracts', models.PositiveIntegerField(default=0)),
                ('token_version', models.PositiveIntegerField(blank=True, default=0)),
                ('money_amount', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='customuser_set', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='customuser_set', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Raffles',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('participate_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('fake_users_amount', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('max_users_amount', models.PositiveIntegerField()),
                ('start_date', models.DateTimeField(auto_now_add=True)),
                ('end_date', models.DateTimeField()),
                ('prize_item', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='raffles', to='main_app.steamitemcs')),
                ('players', models.ManyToManyField(blank=True, related_name='raffles', to='main_app.user')),
                ('winner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='raffles_champion', to='main_app.user')),
            ],
        ),
        migrations.AddField(
            model_name='inventoryitem',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventory', to='main_app.user'),
        ),
        migrations.AddField(
            model_name='battledrop',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='battle_drops', to='main_app.user'),
        ),
        migrations.AddField(
            model_name='battle',
            name='creator',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_battles', to='main_app.user'),
        ),
        migrations.AddField(
            model_name='battle',
            name='players',
            field=models.ManyToManyField(blank=True, related_name='battles', to='main_app.user'),
        ),
        migrations.AddField(
            model_name='battle',
            name='winner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='won_battles', to='main_app.user'),
        ),
        migrations.CreateModel(
            name='BattleCase',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('case_amount', models.PositiveSmallIntegerField()),
                ('position', models.PositiveIntegerField(editable=False)),
                ('battle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='battle_battles', to='main_app.battle')),
                ('case', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='battle_cases', to='main_app.case')),
            ],
            options={
                'ordering': ['position'],
                'unique_together': {('battle', 'case')},
            },
        ),
        migrations.CreateModel(
            name='CaseItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('drop_chance', models.FloatField(help_text='Шанс выпадения предмета в процентах (0-100)')),
                ('case', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='main_app.case')),
                ('steam_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_app.steamitemcs')),
            ],
            options={
                'verbose_name': 'Case Item',
                'verbose_name_plural': 'Case Items',
                'unique_together': {('case', 'steam_item')},
            },
        ),
        migrations.CreateModel(
            name='SocialAccount',
            fields=[
                ('verified_email', models.BooleanField(blank=True, default=False, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('provider', models.CharField(choices=[('google', 'Google'), ('vk', 'VK'), ('steam', 'Steam')], max_length=20)),
                ('provider_user_id', models.CharField(max_length=255)),
                ('access_token', models.TextField(blank=True, null=True)),
                ('refresh_token', models.TextField(blank=True, null=True)),
                ('extra_data', models.JSONField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='social_accounts', to='main_app.user')),
            ],
            options={
                'unique_together': {('provider', 'provider_user_id')},
            },
        ),
    ]
