# Generated by Django 5.2.5 on 2025-09-09 14:35

import django.db.models.deletion
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Case',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name_ru', models.CharField(max_length=70)),
                ('name_en', models.CharField(max_length=70)),
                ('name', models.JSONField(default=dict)),
                ('icon_url', models.URLField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Case',
                'verbose_name_plural': 'Cases',
            },
        ),
        migrations.CreateModel(
            name='InventoryItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('exterior_wear', models.CharField(choices=[('factory_new', 'Factory New'), ('minimal_wear', 'Minimal Wear'), ('field_tested', 'Field-Tested'), ('well_worn', 'Well-Worn'), ('battle_scarred', 'Battle-Scarred')], max_length=20)),
                ('market_hash_name', models.CharField(blank=True, max_length=250, null=True)),
                ('tradable', models.BooleanField(default=True)),
                ('marketable', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Inventory Item',
                'verbose_name_plural': 'Inventory Items',
            },
        ),
        migrations.CreateModel(
            name='ItemsOrders',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('trade_link', models.URLField(blank=True, null=True)),
                ('order_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('completed', models.BooleanField(default=False)),
                ('inventory_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders', to='main_app.inventoryitem')),
            ],
            options={
                'verbose_name': 'Item Order',
                'verbose_name_plural': 'Item Orders',
            },
        ),
        migrations.CreateModel(
            name='SteamItemCs',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('appid', models.PositiveIntegerField(blank=True, default=730, null=True)),
                ('classid', models.CharField(blank=True, max_length=50, null=True)),
                ('instanceid', models.CharField(default='0', max_length=50)),
                ('name_ru', models.CharField(max_length=70)),
                ('name_en', models.CharField(max_length=70)),
                ('name', models.JSONField(default=dict)),
                ('price', models.PositiveIntegerField()),
                ('commodity', models.BooleanField(default=False)),
                ('rarity', models.CharField(choices=[('usuall', 'Usual'), ('rare', 'Rare'), ('elite', 'Elite'), ('epic', 'Epic'), ('classified', 'Classified')], default='usuall', max_length=20)),
                ('icon_url', models.URLField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Steam Item CS',
                'verbose_name_plural': 'Steam Items CS',
                'unique_together': {('appid', 'classid', 'instanceid')},
            },
        ),
        migrations.AddField(
            model_name='inventoryitem',
            name='steam_item',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='instances', to='main_app.steamitemcs'),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('username', models.CharField(default='username', max_length=150, unique=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True, unique=True)),
                ('first_name', models.CharField(blank=True, max_length=30)),
                ('last_name', models.CharField(blank=True, max_length=30)),
                ('avatar_url', models.URLField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('token_version', models.PositiveIntegerField(blank=True, default=0)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='customuser_set', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='customuser_set', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='inventoryitem',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventory', to='main_app.user'),
        ),
        migrations.CreateModel(
            name='CaseItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('drop_chance', models.FloatField(help_text='Шанс выпадения предмета в процентах (0-100)')),
                ('case', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='main_app.case')),
                ('steam_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_app.steamitemcs')),
            ],
            options={
                'verbose_name': 'Case Item',
                'verbose_name_plural': 'Case Items',
                'unique_together': {('case', 'steam_item')},
            },
        ),
        migrations.CreateModel(
            name='SocialAccount',
            fields=[
                ('verified_email', models.BooleanField(blank=True, default=False, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('provider', models.CharField(choices=[('google', 'Google'), ('vk', 'VK'), ('steam', 'Steam')], max_length=20)),
                ('provider_user_id', models.CharField(max_length=255)),
                ('access_token', models.TextField(blank=True, null=True)),
                ('refresh_token', models.TextField(blank=True, null=True)),
                ('extra_data', models.JSONField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='social_accounts', to='main_app.user')),
            ],
            options={
                'unique_together': {('provider', 'provider_user_id')},
            },
        ),
    ]
